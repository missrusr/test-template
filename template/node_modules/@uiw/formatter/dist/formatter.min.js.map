{"version":3,"file":"formatter.min.js","sources":["../src/index.ts"],"sourcesContent":["\nconst dateRegex = /(?=(YYYY|YY|MM|DD|HH|mm|ss|ms))\\1([:/]*)/g;\nconst timespan = {\n  YYYY: ['getFullYear', 4],\n  YY: ['getFullYear', 2],\n  MM: ['getMonth', 2, 1], // getMonth is zero-based, thus the extra increment field\n  DD: ['getDate', 2],\n  HH: ['getHours', 2],\n  mm: ['getMinutes', 2],\n  ss: ['getSeconds', 2],\n  ms: ['getMilliseconds', 3],\n};\n\nfunction formatter(str?: string, date?: Date, utc?: boolean): string {\n  if (typeof str !== 'string') {\n    date = str;\n    str = 'YYYY-MM-DD';\n  }\n\n  return str.replace(dateRegex, (match: string, key: string, rest?: string) => {\n    const args = timespan[key];\n    const chars = args[1];\n    let name = args[0];\n    if (utc === true) {\n      name = `getUTC${name.slice(3)}`;\n    }\n    if (!date) {\n      date = new Date();\n    }\n    const val = `00${String(date[name]() + (args[2] || 0))}`;\n    return val.slice(-chars) + (rest || '');\n  });\n}\n\nformatter.utc = (str?: string, date?: Date): string => {\n  return formatter(str, date, true);\n};\n\nexport default formatter;\n"],"names":["dateRegex","timespan","YYYY","YY","MM","DD","HH","mm","ss","ms","formatter","str","date","utc","replace","match","key","rest","args","chars","name","slice","Date","String"],"mappings":";+LACA,IAAMA,EAAY,4CACZC,EAAW,CACfC,KAAM,CAAC,cAAe,GACtBC,GAAI,CAAC,cAAe,GACpBC,GAAI,CAAC,WAAY,EAAG,GACpBC,GAAI,CAAC,UAAW,GAChBC,GAAI,CAAC,WAAY,GACjBC,GAAI,CAAC,aAAc,GACnBC,GAAI,CAAC,aAAc,GACnBC,GAAI,CAAC,kBAAmB,IAG1B,SAASC,EAAUC,EAAcC,EAAaC,GAM5C,MALmB,iBAARF,IACTC,EAAOD,EACPA,EAAM,cAGDA,EAAIG,QAAQd,EAAW,SAACe,EAAeC,EAAaC,GACzD,IAAMC,EAAOjB,EAASe,GAChBG,EAAQD,EAAK,GACfE,EAAOF,EAAK,GAQhB,OAPY,IAARL,IACFO,EAAO,SAASA,EAAKC,MAAM,IAG3BT,EADGA,GACI,IAAIU,MAED,KAAKC,OAAOX,EAAKQ,MAAWF,EAAK,IAAM,KACxCG,OAAOF,IAAUF,GAAQ,aAIxCP,EAAUG,IAAM,SAACF,EAAcC,GAC7B,OAAOF,EAAUC,EAAKC,GAAM"}