import React, { Component } from 'react';
import ButtonGroup from '../ButtonGroup';
import Button from '../Button';
export default class SegmentedControl extends Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedIndex: props.selectedIndex || 0
    };
  }

  static defaultProps = {
    value: [],
    size: 'small',
    selectedIndex: 0,
    color: '#108ee9'
  };
  handlePress = (label, selectedIndex) => {
    const {
      onValueChange
    } = this.props;
    this.setState({
      selectedIndex
    }, () => {
      onValueChange && onValueChange(label, selectedIndex);
    });
  };

  render() {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const {
      value,
      selectedIndex,
      renderItem,
      ...otherProps
    } = this.props;
    return <ButtonGroup {...otherProps}>
        {value && value.map((label, key) => {
        const styl = {};
        const textStyle = {};

        if (this.state.selectedIndex !== key + 1) {
          styl.backgroundColor = '#fff';
          textStyle.color = otherProps.color;
        }

        const props = {
          type: 'primary',
          style: [styl, otherProps.textStyle],
          textStyle: [textStyle],
          onPress: this.handlePress.bind(this, label, key + 1)
        };

        if (renderItem) {
          return renderItem(label, key + 1, props);
        }

        return React.cloneElement(<Button key={key} />, { ...props
        }, label);
      })}
      </ButtonGroup>;
  }

}